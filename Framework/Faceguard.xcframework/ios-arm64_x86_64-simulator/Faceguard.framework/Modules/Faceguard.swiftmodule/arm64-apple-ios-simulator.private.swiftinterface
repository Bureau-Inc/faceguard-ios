// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Faceguard
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AVFoundation
import CommonCrypto
import CoreML
import DeveloperToolsSupport
import Foundation
import Network
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import bureau_id_fraud_sdk
import os.log
import os
public struct DIInsights {
  public let networkInformation: Faceguard.DINetworkInformation?
  public let gpsLocation: Faceguard.DILocationModel?
  public let ip: Swift.String
  public let ipType: Swift.String
  public let ipLocation: Faceguard.DILocationModel?
  public let ipSecurity: Faceguard.DIIPSecurity?
  public let os: Swift.String
  public let debuggable: Swift.Bool
  public let emulator: Swift.Bool
  public let fingerprint: Swift.String
  public let firstSeenDays: Swift.Int
  public let mockgps: Swift.Bool
  public let model: Swift.String
  public let package: Swift.String
  public let jailbreak: Swift.Bool?
  public let userId: Swift.String
  public let remoteDesktop: Swift.Bool
  public let sessionId: Swift.String
  public let createdAt: Swift.Int64
  public let confidenceScore: Swift.Double?
  public let voiceCallDetected: Swift.Bool?
  public let riskScore: Swift.Int
  public let riskLevel: Swift.String
  public let riskCauses: [Swift.String]
  public let developerMode: Swift.Bool
  public let appStoreInstall: Swift.Bool
  public let fridaDetected: Swift.Bool
  public let accessibilityEnabled: Swift.Bool
  public let factoryResetRisk: Swift.String
  public let factoryResetTime: Swift.Int64?
  public let behaviouralRiskLevel: Swift.String
  public let deviceRiskScore: Swift.Int
  public let deviceRiskLevel: Swift.String
  public let merchantId: Swift.String
  public let requestId: Swift.String
  public let timestamp: Swift.Int64?
  public let statusCode: Swift.Int?
}
public struct DINetworkInformation : Swift.Codable {
  public let isp: Swift.String?
  public let ipType: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DILocationModel : Swift.Codable {
  public let city: Swift.String?
  public let country: Swift.String?
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public let region: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DIIPSecurity : Swift.Codable {
  public let isCrawler: Swift.Bool?
  public let isProxy: Swift.Bool?
  public let isTor: Swift.Bool?
  public let threatLevel: Swift.String?
  public let vpn: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceguardServicesConfiguration {
  public init(retryEnabled: Swift.Bool = true, statusScreenRequired: Swift.Bool = true, enableFaceMatch: Swift.Bool = true, enableFaceAnalyser: Swift.Bool = false, enableFaceDedupe: Swift.Bool = false, enableFaceEntityEnrollment: Swift.Bool = false, imageURL: Swift.String? = nil, consentType: Faceguard.ConsentType? = .explicit)
}
public enum ConsentType {
  case explicit
  case implicit
  public static func == (a: Faceguard.ConsentType, b: Faceguard.ConsentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FaceEntityEnrollmentResponse {
  public var failure: Faceguard.FailureResponse?
  public var faceEnrollmentModel: Faceguard.FaceEnrollmentModel?
}
public struct FaceEnrollmentModel : Swift.Codable {
  public let bureauConsentId: Swift.String
  public let consent: Swift.Bool
  public let consentType: Swift.String
  public let custID: Swift.String
  public let entityId: Swift.String
  public let merchantId: Swift.String
  public let request: Faceguard.ConsentRequest
  public let requestId: Swift.String
  public let sessionId: Swift.String
  public let statusCode: Swift.Int
  public let timestamp: Swift.Int64
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsentRequest : Swift.Codable {
  public let entityType: Swift.String
  public let entityStatus: Swift.String
  public let userData: Faceguard.UserData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserData : Swift.Codable {
  public let merchantId: Swift.String?
  public let selfieBase64: Swift.String?
  public let additionalData: Faceguard.AdditionalData?
  public let imageURL: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdditionalData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NetworkStatus {
  case unknown
  case notReachable
  case reachableViaWiFi
  case reachableViaCellular
  public static func == (a: Faceguard.NetworkStatus, b: Faceguard.NetworkStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FaceAnalyzerResponse {
  public var failure: Faceguard.FailureResponse?
  public var faceAnalyzerModel: Faceguard.FaceAnalyzerModel?
}
public struct FaceAnalyzerModel : Swift.Codable {
  public let ageRange: Faceguard.AgeRange?
  public let gender: Faceguard.Gender?
  public let merchantId: Swift.String?
  public let requestId: Swift.String?
  public let sessionId: Swift.String?
  public let custID: Swift.String?
  public let statusCode: Swift.Int?
  public let timestamp: Swift.Int64?
  public let consent: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AgeRange : Swift.Codable {
  public let high: Swift.Int?
  public let low: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Gender : Swift.Codable {
  public let confidence: Swift.Double?
  public let value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceguardThresholdConfig {
  public var hijab: Swift.Double
  public var mask: Swift.Double
  public var headgear: Swift.Double
  public var clothing: Swift.Double
  public var glasses: Swift.Double
  public var skinOrChest: Swift.Double
  public init(hijab: Swift.Double = 0.8, mask: Swift.Double = 0.8, headgear: Swift.Double = 0.8, clothing: Swift.Double = 0.8, glasses: Swift.Double = 0.8, skinOrChest: Swift.Double = 0.9)
}
public protocol FaceguardDelegate : AnyObject {
  func faceguardProcessDidCompleteWith(success: Swift.Bool, error: Faceguard.NetworkError?, image: UIKit.UIImage?, faceguardResponse: Faceguard.FaceguardResponse?)
}
public struct FaceguardResponse {
  public var diInsights: Faceguard.DIInsights?
  public var faceDetectionResponse: Faceguard.FaceDetectionResponse?
  public var faceMatchResponse: Faceguard.FaceMatchResponse?
  public var faceAnalyzerResponse: Faceguard.FaceAnalyzerResponse?
  public var faceDedupeResponse: Faceguard.FaceDedupeResponse?
  public var faceEntityEnrollmentResponse: Faceguard.FaceEntityEnrollmentResponse?
}
public struct FaceMatchResponse {
  public var failure: Faceguard.FailureResponse?
  public var faceMatchModel: Faceguard.FaceMatchModel?
}
public struct FaceMatchModel : Swift.Codable {
  public let confidence: Swift.Double?
  public let similarity: Swift.Double?
  public let merchantId: Swift.String?
  public let requestId: Swift.String?
  public let bureauConsentId: Swift.String?
  public let timestamp: Swift.Int?
  public let statusCode: Swift.Int?
  public let consent: Swift.Bool?
  public let statusMessage: Swift.String?
  public let consentType: Swift.String?
  public let custID: Swift.String?
  public let sessionId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceDetectionResponse : Swift.Codable {
  public let merchantId: Swift.String?
  public let message: Swift.String?
  public let requestId: Swift.String?
  public let result: Faceguard.DetectionResult?
  public let statusCode: Swift.Int?
  public let timestamp: Swift.Int64?
  public let bureauConsentId: Swift.String?
  public let consent: Swift.Bool?
  public let custID: Swift.String?
  public let sessionId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DetectionResult : Swift.Codable {
  public let faces: Faceguard.FaceAnalysis?
  public let liveness: Faceguard.LivenessAnalysis?
  public let moderation: Faceguard.ModerationAnalysis?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceAnalysis : Swift.Codable {
  public let accessories: Faceguard.Accessories?
  public let eyesOpen: Swift.Bool?
  public let multipleFacesDetected: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Accessories : Swift.Codable {
  public let clothing: Swift.Double?
  public let glasses: Swift.Double?
  public let headgear: Swift.Double?
  public let hijab: Swift.Double?
  public let mask: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LivenessAnalysis : Swift.Codable {
  public let live: Swift.Bool?
  public let livenessScore: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ModerationAnalysis : Swift.Codable {
  public let blackAndWhite: Swift.Bool?
  public let gore: Swift.Bool?
  public let nudity: Swift.Bool?
  public let poorQuality: Swift.Bool?
  public let skinOrChest: Swift.Double?
  public let whiteBackground: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceguardTheme {
  public init(primaryTextColor: UIKit.UIColor?, secondaryTextColor: UIKit.UIColor?, primaryBackgroundColor: UIKit.UIColor?, fontName: Swift.String?, logo: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LivenessNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
public struct FaceguardConfiguration {
  public init(credentialId: Swift.String, basicAuthKey: Swift.String, cypherKey: Swift.String, userId: Swift.String? = nil, environment: Faceguard.Environment = .production, thresholdConfig: Faceguard.FaceguardThresholdConfig? = nil, theme: Faceguard.FaceguardTheme? = nil, servicesConfiguration: Faceguard.FaceguardServicesConfiguration? = nil)
}
public struct MultipartFile {
  public init(fieldName: Swift.String, fileName: Swift.String, data: Foundation.Data, mimeType: Swift.String = "application/octet-stream")
}
public enum Environment : Swift.String {
  case development
  case production
  case staging
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FaceDedupeResponse {
  public var failure: Faceguard.FailureResponse?
  public var faceDedupeModel: Faceguard.FaceDedupeModel?
}
public struct FaceDedupeModel : Swift.Codable {
  public let bureauConsentId: Swift.String?
  public let consent: Swift.Bool?
  public let consentType: Swift.String?
  public let custID: Swift.String?
  public let matchingEntities: [Faceguard.MatchingEntity]?
  public let merchantId: Swift.String?
  public let requestId: Swift.String?
  public let sessionId: Swift.String?
  public let statusCode: Swift.Int?
  public let timestamp: Swift.Int64?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MatchingEntity : Swift.Codable {
  public let entityId: Swift.String?
  public let selfie: Swift.String?
  public let userData: Faceguard.UserData?
  public let createdAt: Swift.Int64?
  public let updatedAt: Swift.Int64?
  public let entityStatus: Swift.String?
  public let entityType: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NetworkError : Swift.Error, Foundation.LocalizedError {
  case noData
  case noNetwork
  case invalidSyntax
  case noError
  case invalidData
  case diFailed
  case emptyImageURL
  case wrongThresholdValues
  case emptyRequiredParams
  case httpError(statusCode: Swift.Int)
  case errorModel(data: Foundation.Data)
  case timeout
  case unknown((any Swift.Error)?)
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
extension Faceguard.NetworkError : Swift.Equatable {
  public static func == (lhs: Faceguard.NetworkError, rhs: Faceguard.NetworkError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class FaceguardSDK {
  public static func initialize(with configuration: Faceguard.FaceguardConfiguration, delegate: any Faceguard.FaceguardDelegate) -> Faceguard.FaceguardSDK?
  public func start(from viewController: UIKit.UIViewController)
  @objc deinit
}
public struct FailureResponse : Swift.Codable {
  public let error: Faceguard.ErrorDetail?
  public let merchantId: Swift.String?
  public let requestId: Swift.String?
  public let statusCode: Swift.Int?
  public let timestamp: Swift.Int64?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorDetail : Swift.Codable {
  public let code: Swift.Int?
  public let description: Swift.String?
  public let message: Swift.String?
  public let metadata: Faceguard.ErrorMetadata?
  public let referenceId: Swift.String?
  public let type: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorMetadata : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorType : Swift.String, Swift.CaseIterable {
  case internalServerError
  case badRequest
  case unauthorized
  case forbidden
  case notFound
  case methodNotAllowed
  case requestTimeout
  case conflict
  case unprocessableEntity
  case tooManyRequests
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Faceguard.ErrorType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [Faceguard.ErrorType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Faceguard.FailureResponse {
  public var userFriendlyMessage: Swift.String {
    get
  }
}
extension Faceguard.ConsentType : Swift.Equatable {}
extension Faceguard.ConsentType : Swift.Hashable {}
extension Faceguard.NetworkStatus : Swift.Equatable {}
extension Faceguard.NetworkStatus : Swift.Hashable {}
extension Faceguard.Environment : Swift.Equatable {}
extension Faceguard.Environment : Swift.Hashable {}
extension Faceguard.Environment : Swift.RawRepresentable {}
extension Faceguard.ErrorType : Swift.Equatable {}
extension Faceguard.ErrorType : Swift.Hashable {}
extension Faceguard.ErrorType : Swift.RawRepresentable {}
